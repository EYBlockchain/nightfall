#!/bin/bash
set -e

GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

printf "${GREEN}*** Cleaning up all test containers ***${NC}\n"
docker-compose down -v || true

printf "${GREEN}*** Build image for all Containers ***${NC}\n"
docker-compose build

printf "${GREEN}*** Pull zokrates docker image ***${NC}\n"
docker pull zokrates/zokrates:0.4.11

printf "${GREEN}*** Install node modules dependencies of nightfall ***${NC}\n"
npm ci

printf "${GREEN}*** Installing zkp-util dependencies"
pushd zkp-utils
npm ci
popd

printf "${GREEN}*** Launching containerized ganache ***${NC}\n"
docker-compose up -d ganache

printf "${GREEN}*** Deploying all contracts ***${NC}\n"
docker-compose run --rm truffle-offchain migrate --reset --network=default
docker-compose run --rm truffle-zkp migrate --reset --network=default

printf "${GREEN}*** Launching containerized microservices ***${NC}\n"
docker-compose up -d mongo accounts offchain zkp database api-gateway

# save all test logs to a file in background
printf "${GREEN}*** Saving the test logs to nightfall_test.log file ***${NC}\n"
docker-compose logs -f &> nightfall_test.log &disown

# delay needed to ensure all container are in running state.
sleep 20

# RUN test suits and remove test containers
printf "${GREEN}*** Run Integration test ***${NC}\n"
npm run test || printf "${RED}*** Integration test failed ***${NC}\n"

printf "${GREEN}*** List all containers with their Ips ***${NC}\n"
docker inspect -f '{{.Name}} {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' $(docker-compose ps -q)

printf "${GREEN}*** Cleaning up all containers ***${NC}\n"
docker-compose down -v || {
  # delay need as waiting time so all container are properly done
  # nightfall_default network have no dependency left.
  sleep 3

  printf "${GREEN}*** Remove network ***${NC}\n"
  docker network rm nightfall_default

  printf "${GREEN}*** Remove mongo volume ***${NC}\n"
  docker volume rm nightfall_mongo-volume

  printf "${GREEN}*** Remove zkp-code volume ***${NC}\n"
  docker volume rm nightfall_zkp-code
}
