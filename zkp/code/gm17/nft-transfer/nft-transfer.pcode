import "hashes/sha256/512bit.code" as sha256compression
import "utils/pack/unpack128.code" as unpack128

def CONCAT216x216x216(field[216] a, field[216] b, field[216] c)->(field[648]):
	return [...a, ...b, ...c]

def CONCAT216x216(field[216] a, field[216] b)->(field[432]):
	return [...a, ...b]

def shaPad432To512(field[432] a)->(field[512]):
	return [...a, 1, 70....0, 1,1,0,1,1,0,0,0,0]

def shaPad216To512(field[216] a)->(field[512]):
	return [...a, 1, 287....0, 1,1,0,1,1,0,0,0]

def ORDEREDCONCAT216x216(field order, field[216] f, field[216] g)->(field[432]):
	field[216] r = if order==0 then g else f fi
	field[216] s = if order==0 then f else g fi
	return [...r, ...s]


//inputs for main are:
// A - Asset identifier which is the hash return of asset meta data from swarm
// The path to Root from node where A is present is b0....b7
// R - the Merkle root (public)
// N - Nullifier of token commitment containing A (Public)
// Pkb - Public key of Bob who will receive the transferred token
// S - Serial Number of token commitment of A belonging to sender Alice
// Sb - Serial Number of token commitment of A belonging to receiver Bob
// Sk - Secret key of Alice
// Zb - Token commitment of the receiver (Public)

//Note - we now use 216 bits for the Merkle tree calculation.  This is because 432 is the biggest input we can use for sha256
// if we want 432/2 to end on a byte boundary for easier Solidity computation
//without needing to do full rounds and we need to concatenate the two child hashes.
//We consider 216 bits to be sufficiently secure.

//Each field element passed to main() can be at most 128bits, to make use of unpack128() so most variables,being 216 bits long, occupy two fields

def main('field' £pA1...0, @[private field b*bh, private field b*bl]0...31, private field pOrder, 'field' pN1...0, 'field' £pPkb1...0, 'field' £pS1...0, 'field' £pSb1...0, 'field' £pSk1...0, 'field' pR1...0, 'field' pZb1...0)->(field1):

	//Unpack the inputs of main() to 128 bits. We'll unpack each field to its own 128 bit strings for simplicity for now. Later efficiencies could be made by grouping some inputs.

	field[128] a1 = unpack128(pA1) //this may seem long-winded but ZoKrates needs intermediate variables for now
	field[128] a0 = unpack128(pA0)
	field[256] a = [...a1, ...a0]

	field[128] Sk1 = unpack128(pSk1)
	field[128] Sk0 = unpack128(pSk0)
	field[256] Sk = [...Sk1, ...Sk0]

	field[128] Sb1 = unpack128(pSb1) //this slightly long-winded approach needed so Zokrates can flatten the expressions
	field[128] Sb0 = unpack128(pSb0)
	field[256] Sb = [...Sb1, ...Sb0]

	{field[128] b*b1 = unpack128(b*bh)}31...0
	{field[128] b*b0 = unpack128(b*bl)}31...0
	{field[256] b*b = [...b*b1, ...b*b0]}31...0

	field[128] S1 = unpack128(pS1)
	field[128] S0 = unpack128(pS0)
	field[256] S = [...S1, ...S0]

	field[128] N1 = unpack128(pN1)
	field[128] N0 = unpack128(pN0)
	field[256] N = [...N1, ...N0]

	field[128] Pkb1 = unpack128(pPkb1)
	field[128] Pkb0 = unpack128(pPkb0)
	field[256] Pkb = [...Pkb1, ...Pkb0]

	field[128] Zb1 = unpack128(pZb1)
	field[128] Zb0 = unpack128(pZb0)
	field[256] Zb = [...Zb1, ...Zb0]

	field[128] R1 = unpack128(pR1)
	field[128] R0 = unpack128(pR0)
	field[256] R = [...R1, ...R0]

	field[128] order = unpack128(pOrder)


//H(S|Sk) = Nullifier. The padding needs to be added to create a true hash

	field[432] t = CONCAT216x216(S[40..256], Sk[40..256])
	field[512] u = shaPad432To512(t)
	field[256] PrA = sha256compression(u[0..256],u[256..512])

// Calculation of Pk from H(Sk)

	u = shaPad216To512(Sk[40..256])
	field[256] Pk = sha256compression(u[0..256],u[256..512])

// Proof 2. H(A|Pk|S) = Z_A is in the Merkle Tree

	field[648] d = CONCAT216x216x216(a[40..256], Pk[40..256], S[40..256])
	//this is too big to handle in a single sha round and our sha can't handle multiple rounds
	//as a work-around, we will split d, hash both parts and then hash the result - remember to do this in Node too!
	//first 432 bits (432 is 216*2 - a convenient number in our 216 bit scheme)
	field[512] q = shaPad432To512(d[216..648])
	field[256] s = sha256compression(q[0..256],q[256..512])
	//remaining 216 bits
	u = shaPad216To512(d[0..216])
	field[256] v = sha256compression(u[0..256],u[256..512])
	//then concat the results msb first
	t = CONCAT216x216(v[40..256], s[40..256])
	//and hash the result
	q = shaPad432To512(t)
	s = sha256compression(q[0..256],q[256..512]) //z

	//concat 1st through 31st siblings
	{t = ORDEREDCONCAT216x216(order[*], s[40..256], b*b[40..256])
	u = shaPad432To512(t)
	s = sha256compression(u[0..256],u[256..512])}31...1

// concat with the 32nd sibling. This should equal the root.
	t = ORDEREDCONCAT216x216(order[0], s[40..256], b0b[40..256])
	u = shaPad432To512(t)
	field[256] PrB = sha256compression(u[0..256],u[256..512])


// Proof 3. Know A|Pkb|Sb such that H(A|Pkb|Sb) = Zb

	d = CONCAT216x216x216(a[40..256], Pkb[40..256], Sb[40..256])
	//this is too big to handle in a single sha round and our sha can't handle multiple rounds
	//as a work-around, we will split d, hash both parts and then hash the result - remember to do this in Node too!
	//first 432 bits (432 is 216*2 - a convenient number in our 216 bit scheme)
	q = shaPad432To512(d[216..648])
	s = sha256compression(q[0..256],q[256..512])
	//remaining 216 bits
	u = shaPad216To512(d[0..216])
	v = sha256compression(u[0..256],u[256..512])
	//then concat the results msb first
	t = CONCAT216x216(v[40..256], s[40..256])
	//and hash the result
	q = shaPad432To512(t)
	field[256] PrC = sha256compression(q[0..256],q[256..512]) //zd

//check proofs

	PrA[40..256]==N[40..256]

	PrB[40..256]==R[40..256]

	PrC[40..256]==Zb[40..256]

	return 1
