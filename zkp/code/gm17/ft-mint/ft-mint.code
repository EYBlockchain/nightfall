
import "hashes/sha256/512bit.code" as sha256compression
import "utils/pack/unpack128.code" as unpack128

def CONCAT128x216x216(field[128] a, field[216] b, field[216] c)->(field[560]):
	return [...a, ...b, ...c]

def CONCAT216x216(field[216] a, field[216] b)->(field[432]):
	return [...a, ...b]

def shaPad432To512(field[432] a)->(field[512]):
	return [...a, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,1,0,1,1,0,0,0,0]

def shaPad216To512(field[216] a)->(field[512]):
	return [...a, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,1,0,1,1,0,0,0]

def shaPad128To512(field[128] a)->(field[512]):
	return [...a, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,0,0,0,0,0,0,0]

// MAIN - Proving Asset Coin A is in the token Z { Z = H(S|Pk|A) }

// Inputs for main are:
// - value (public) is the 128 bit coin value
// - privateKey (private) is the 216 bit public key of the commitment derived by hashing the Secret Key Sk of the commitment. IT IS KEPT PRIVATE FOR ZK!!!
// - salt (private) is the 216 bit salt for the commitment
// - commitment (public) is the 216 bit commitment

// Note - We have truncated the 256 bit SHA hash down to 216 bits.  We do not believe this has a significant affect on security and it avoids having to include sha256 rounds in the sha circuit implementation.

//Each field element can be at most 254 bits. We cap our field elements to 128 bits (16 bytes) to match the functionality of the pack128() and unpack128() functions.
//This means that most input variables occupy two field elements, being 216 bits in length

def main(field value, private field  privateKeyHigh, private field  privateKeyLow, private field  saltHigh, private field  saltLow, field  commitmentHigh, field  commitmentLow)->(field):


	//Unpack the inputs value,S,Pk,Z. Unpacks each into a 128 bit block (for simplicity). The unpacked binary string is in big endian format, left-padded with 0's. (NOTE: THIS METHOD OF PADDING IS DIFFERENT FROM THE PADDING REQUIRED FOR SHA256 - i.e. unpack128() padding is very different from that produced by shaPad64To512())
	//unpack128 unpacks a field element to 128 field elements.
	//the coin value is only 128 bits - no one will want more money than that.

	field[128] valueBits = unpack128(value)
	field[128] saltHighBits = unpack128(saltHigh) //this may seem long winded but ZoKrates needs intermediate variables for now
	field[128] saltLowBits = unpack128(saltLow)
	field[256] saltBits = [...saltHighBits, ...saltLowBits]
	field[128] privateKeyHighBits = unpack128(privateKeyHigh)
	field[128] privateKeyLowBits = unpack128(privateKeyLow)
	field[256] privateKeyBits = [...privateKeyHighBits, ...privateKeyLowBits]
	field[128] commitmentHighBits = unpack128(commitmentHigh)
	field[128] commitmentLowBits = unpack128(commitmentLow)
	field[256] commitmentBits = [...commitmentHighBits, ...commitmentLowBits]


	// Concatentate value,Pk,salt to get the commitment's preimage:

	field[560] q = CONCAT128x216x216(valueBits, privateKeyBits[40..256], saltBits[40..256]) //keep the lowest bytes

	// This is too big to handle in a single sha round and our sha can't handle multiple rounds. As a work-around, we will split q, hash both parts and then hash the result - remember to do this in Node too!

	// First 432 bits (432 is 216*2 - a convenient number in our 216 bit scheme):

	field[512] t = shaPad432To512(q[128..560]) //note that we take the low bits first
	field[256] s = sha256compression(t[0..256],t[256..512])

  // Remaining 128 high bits:

	field[512] u = shaPad128To512(q[0..128])
	field[256] v = sha256compression(u[0..256],u[256..512])

	// Then concat the results msb first:

  field[432] w = CONCAT216x216(v[40..256], s[40..256])

  // And hash the result:

	t = shaPad432To512(w)
	field[256] commitmentBitsCheck = sha256compression(t[0..256],t[256..512])


	// This checks if the commitmentBitsCheck we computed using the 'value' (which is H(A|Pk|S)) is equal to the input commitment until the 1st 216 bits:

	commitmentBits[40..256] == commitmentBitsCheck[40..256]


	return 1
