
import "hashes/sha256/512bit.code" as sha256compression
import "utils/pack/unpack128.code" as unpack128

def CONCAT128x216x216(field[128] a, field[216] b, field[216] c)->(field[560]):
	return [...a, ...b, ...c]

def CONCAT216x216(field[216] a, field[216] b)->(field[432]):
	return [...a, ...b]

def shaPad432To512(field[432] a)->(field[512]):
	return [...a, 1, 70....0, 1,1,0,1,1,0,0,0,0]

def shaPad216To512(field[216] a)->(field[512]):
	return [...a, 1, 287....0, 1,1,0,1,1,0,0,0]

def shaPad128To512(field[128] a)->(field[512]):
	return [...a, 1, 375....0, 1,0,0,0,0,0,0,0]

//MAIN - Proving Asset Coin A is in the token Z { Z = H(S|Pk|A) }

//inputs for main are:

// - A (public) is the 128 bit coin value

// - Pk (private) is the 216 bit public key of A derived by hashing the Secret Key Sk of A. IT IS KEPT PRIVATE FOR ZK!!!

// - S (private) is the 216 bit private token random nonce

// - Z (public) is the 216 bit public identifier of the token commitment

// Note - We have truncated the 256 bit SHA hash down to 216 bits.  We do not believe this has a significant affect on security and it avoids having to include sha256 rounds in the sha circuit implementation.

//Each field element can be at most 254 bits. We cap our field elements to 128 bits (16 bytes) to match the functionality of the pack128() and unpack128() functions.
//This means that most input variables occupy two field elements, being 216 bits in length

def main(field pA, 'field' £pPk1...0, 'field' £pS1...0, 'field' pZ1...0)->(field1):

	//Unpack the inputs A,S,Pk,Z. Unpacks each into a 128 bit block (for simplicity). The unpacked binary string is in big endian format, left-padded with 0's. (NOTE: THIS METHOD OF PADDING IS DIFFERENT FROM THE PADDING REQUIRED FOR SHA256 - i.e. unpack128() padding is very different from that produced by shaPad64To512())
	//unpack128 unpacks a field element to 128 field elements.
	//the coin value A is only 128 bits - no one will want more money than that.

	field[128] A = unpack128(pA)
	field[128] S1 = unpack128(pS1) //this may seem long winded but ZoKrates needs intermediate variables for now
	field[128] S0 = unpack128(pS0)
	field[256] S = [...S1, ...S0]
	field[128] Pk1 = unpack128(pPk1)
	field[128] Pk0 = unpack128(pPk0)
	field[256] Pk = [...Pk1, ...Pk0]
	field[128] Z1 = unpack128(pZ1)
	field[128] Z0 = unpack128(pZ0)
	field[256] Z = [...Z1, ...Z0]

	//Concat A,Pk,S.

	field[560] d = CONCAT128x216x216(A, Pk[40..256], S[40..256]) //keep the lowest bytes

	//this is too big to handle in a single sha round and our sha can't handle multiple rounds
	//as a work-around, we will split d, hash both parts and then hash the result - remember to do this in Node too!

		//first 432 bits (432 is 216*2 - a convenient number in our 216 bit scheme)
	field[512] t = shaPad432To512(d[128..560]) //note that we take the low bits first
	field[256] s = sha256compression(t[0..256],t[256..512])
		//remaining 128 high bits
	field[512]u = shaPad128To512(d[0..128])
	field[256] v = sha256compression(u[0..256],u[256..512])
		//then concat the results msb first
	field[432] e = CONCAT216x216(v[40..256], s[40..256])
		//and hash the result
	t = shaPad432To512(e)
	field[256] z = sha256compression(t[0..256],t[256..512])

	//This checks if the hash z we computed using A which is H(A|Pk|S) is equal to Z until the 1st 216 bits:

	z[40..256] == Z[40..256]

	return 1
