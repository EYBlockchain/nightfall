import "hashes/sha256/512bit.code" as sha256compression
import "utils/pack/unpack128.code" as unpack128

def CONCAT216x216x216(field[216] a, field[216] b, field[216] c)->(field[648]):
	return [...a, ...b, ...c]

def CONCAT216x216(field[216] a, field[216] b)->(field[432]):
	return [...a, ...b]

def shaPad432To512(field[432] a)->(field[512]):
	return [...a, 1, 70....0, 1,1,0,1,1,0,0,0,0]

def shaPad216To512(field[216] a)->(field[512]):
	return [...a, 1, 287....0, 1,1,0,1,1,0,0,0]

def ORDEREDCONCAT216x216(field order, field[216] f, field[216] g)->(field[432]):
	field[216] r = if order==0 then g else f fi
	field[216] s = if order==0 then f else g fi
	return [...r, ...s]

//inputs for main are:

// payTo, the public Ethereum address to which the burned tokens get paid
// A, the asset identifier(hash) contained in coin z_A (public)
// Alice's secret key SkA (private)
// Sa the serial number for coin z_A (private)
// c0b-c31b - the Merkle path for A (private)
// Na the nullifier for A (public)
// R - the Merkle root (public)

// Note - We truncate the 256 bit SHA hash down to 216 bits as it's a better fit with our coding scheme

def main('field' payTo1...0, 'field' pA1...0, 'field' £pSkA1...0, 'field' £pSa1...0, @[private field c*bh, private field c*bl]0...31, private field pOrder, 'field' pNa1...0, 'field' pR1...0)->(field1):

//Unpack the inputs of main() to 128 bits. We'll unpack each field to its own 128 bit string for simplicity for now. Later efficiencies could be made by grouping some inputs.

// We don't need to unpack payTo, because it isn't part of a hash.

field[128] A1 = unpack128(pA1) //this may seem long-winded but ZoKrates needs intermediate variables for now
field[128] A0 = unpack128(pA0)
field[256] A = [...A1, ...A0]

field[128] SkA1 = unpack128(pSkA1)
field[128] SkA0 = unpack128(pSkA0)
field[256] SkA = [...SkA1, ...SkA0]

field[128] Sa1 = unpack128(pSa1) //this slightly long-winded approach needed so Zokrates can flatten the expressions
field[128] Sa0 = unpack128(pSa0)
field[256] Sa = [...Sa1, ...Sa0]

{field[128] c*b1 = unpack128(c*bh)}31...0
{field[128] c*b0 = unpack128(c*bl)}31...0
{field[256] c*b = [...c*b1, ...c*b0]}31...0

field[128] Na1 = unpack128(pNa1)
field[128] Na0 = unpack128(pNa0)
field[256] Na = [...Na1, ...Na0]

field[128] R1 = unpack128(pR1)
field[128] R0 = unpack128(pR0)
field[256] R = [...R1, ...R0]

field[128] order = unpack128(pOrder)


//*************first we construct a proof that the nullifier Na is correct************
	//concat Sa|Sk. The padding needs to be added to create a true hash

		field[432] t = CONCAT216x216(Sa[40..256], SkA[40..256])
		field[512] u = shaPad432To512(t)
		field[256] na = sha256compression(u[0..256],u[256..512])

// *********next, calculate Alice's public key from her private key: PkA = H(SkA) truncated to 64 bits.  This will be useful later

		u = shaPad216To512(SkA[40..256])
		field[256] PkA = sha256compression(u[0..256],u[256..512])

//*************Prove that Zc is in the Merkle tree

// ***First calculate Zc = H(A|PkA|S)

	field[648] d = CONCAT216x216x216(A[40..256], PkA[40..256], Sa[40..256])
	//this is too big to handle in a single sha round and our sha can't handle multiple rounds
	//as a work-around, we will split d, hash both parts and then hash the result - remember to do this in Node too!
	//first 432 bits (432 is 216*2 - a convenient number in our 216 bit scheme)
	field[512] q = shaPad432To512(d[216..648])
	field[256] s = sha256compression(q[0..256],q[256..512])
	//remaining 216 bits
	u = shaPad216To512(d[0..216])
	field[256] v = sha256compression(u[0..256],u[256..512])
	//then concat the results msb first
	t = CONCAT216x216(v[40..256], s[40..256])
	//and hash the result
	q = shaPad432To512(t)
	s = sha256compression(q[0..256],q[256..512]) //z

	//concat 1st through 31st siblings
	{t = ORDEREDCONCAT216x216(order[*], s[40..256], c*b[40..256])
	u = shaPad432To512(t)
	s = sha256compression(u[0..256],u[256..512])}31...1

	// concat with the 32nd sibling. This should equal the root.
	t = ORDEREDCONCAT216x216(order[0], s[40..256], c0b[40..256])
	u = shaPad432To512(t)
	field[256] ra = sha256compression(u[0..256],u[256..512])

//**************Now test the proofs

	Na[40..256]==na[40..256]
	R[40..256]==ra[40..256]

//**************Intertwine payTo in the proof (trivially)

	payTo1 * 1 == payTo1
	payTo0 * 1 == payTo0

	return 1
